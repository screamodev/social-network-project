{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"names":["module","exports","DialogItem","props","path","id","className","classes","dialog","active","to","name","MessageItem","message","maxLength50","maxLengthCreator","MessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","dialogsElements","dialogsData","map","messagesElements","messagesData","isLogin","dialogs","dialogsItems","messages","formData","sendMessage","newMessageBody","compose","connect","state","dialogsPage","dispatch","sendMessageCreator","Component","RedirectComponent","this","React","auth"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,KAAO,sBAAsB,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,4B,oKCc7LC,EAVI,SAACC,GAClB,IAAIC,EAAI,mBAAeD,EAAME,IAE7B,OACE,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACE,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,U,kBCFjBC,EAJK,SAACT,GACnB,OAAO,qBAAKG,UAAWC,IAAQC,OAAxB,SAAiCL,EAAMU,W,wCCgC1CC,EAAcC,YAAiB,IAoB/BC,EAAmBC,YAAU,CACjCC,KAAM,WADiBD,EAlBL,SAACd,GACnB,OACE,uBAAMgB,SAAUhB,EAAMiB,aAAtB,UACE,8BACE,cAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBH,KAAK,iBACLe,YAAY,4BAGhB,8BACE,kDAUOC,EApDC,SAACxB,GACf,IAAIyB,EAAkBzB,EAAM0B,YAAYC,KAAI,SAACtB,GAAD,OAC1C,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAMN,GAAIG,EAAOH,QAExC0B,EAAmB5B,EAAM6B,aAAaF,KAAI,SAACjB,GAAD,OAC5C,cAAC,EAAD,CAAaA,QAASA,EAAQA,QAASR,GAAIQ,EAAQR,QAQrD,OAAKF,EAAM8B,QAKT,sBAAK3B,UAAWC,IAAQ2B,QAAxB,UACE,qBAAK5B,UAAWC,IAAQ4B,aAAxB,SAAuCP,IACvC,qBAAKtB,UAAWC,IAAQ6B,SAAxB,SACE,8BAAML,MAER,cAACf,EAAD,CAAkBG,SAdF,SAACkB,GACnBlC,EAAMmC,YAAYD,EAASE,sBAIpB,cAAC,IAAD,CAAU7B,GAAI,Y,uDCEV8B,sBACbC,aAjBoB,SAACC,GACrB,MAAO,CACLb,YAAaa,EAAMC,YAAYd,YAC/BG,aAAcU,EAAMC,YAAYX,aAChCO,eAAgBG,EAAMC,YAAYJ,mBAIb,SAACK,GACxB,MAAO,CACLN,YAAa,SAACC,GACZK,EAASC,YAAmBN,UChBF,SAACO,GAAe,IACxCC,EADuC,4JAE3C,WACE,OAAKC,KAAK7C,MAAM8B,QACT,cAACa,EAAD,eAAeE,KAAK7C,QADK,cAAC,IAAD,CAAUO,GAAG,eAHJ,GACbuC,IAAMH,WAYtC,OAHqCL,aAHJ,SAACC,GAAD,MAAY,CAC3CT,QAASS,EAAMQ,KAAKjB,WAEeQ,CACnCM,KDUWP,CAGbb","file":"static/js/3.0ca1e5bd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Dialogs_item__29pPd\",\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport classes from \"./DialogItem.module.css\";\n//import { useState } from 'react';\n\nconst DialogItem = (props) => {\n  let path = `/dialogs/${props.id}`;\n\n  return (\n    <div className={classes.dialog + \" \" + classes.active}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  );\n};\n\nexport default DialogItem;\n","import React from \"react\";\nimport classes from \"./MessageItem.module.css\";\n//import { useState } from 'react';\n\nconst MessageItem = (props) => {\n  return <div className={classes.dialog}>{props.message}</div>;\n};\n\nexport default MessageItem;\n","import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./MessageItem/MessageItem\";\nimport { Redirect } from \"react-router\";\nimport { Field, reduxForm } from \"redux-form\";\nimport { Textarea } from \"../common/FormControls/FormsControls\";\nimport { maxLengthCreator, required } from \"../../utils/validators/index\";\n\nconst Dialogs = (props) => {\n  let dialogsElements = props.dialogsData.map((dialog) => (\n    <DialogItem name={dialog.name} id={dialog.id} />\n  ));\n  let messagesElements = props.messagesData.map((message) => (\n    <MessageItem message={message.message} id={message.id} />\n  ));\n\n \n  let addNewMessage = (formData) => {\n    props.sendMessage(formData.newMessageBody);\n  };\n\n  if (!props.isLogin) {\n    return <Redirect to={\"/login\"} />; //Хуйня,как для функ компоненты\n  }\n\n  return (\n    <div className={classes.dialogs}>\n      <div className={classes.dialogsItems}>{dialogsElements}</div>\n      <div className={classes.messages}>\n        <div>{messagesElements}</div>\n      </div>\n      <MessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst MessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          component={Textarea}\n          validate={[required, maxLength50]}\n          name=\"newMessageBody\"\n          placeholder=\"Enter your message...\"\n        />\n      </div>\n      <div>\n        <button>send</button>\n      </div>\n    </form>\n  );\n};\n\nconst MessageFormRedux = reduxForm({\n  form: \"message\",\n})(MessageForm);\n\nexport default Dialogs;\n","import React from \"react\";\nimport {\n  sendMessageCreator,\n} from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsData: state.dialogsPage.dialogsData,\n    messagesData: state.dialogsPage.messagesData,\n    newMessageBody: state.dialogsPage.newMessageBody,\n  };\n};\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessageBody) => {\n      dispatch(sendMessageCreator(newMessageBody));\n    },\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router\";\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isLogin) return <Redirect to=\"/login\" />;\n      return <Component {...this.props} />;\n    }\n  }\n  let mapStateToPropsForRedirect = (state) => ({\n    isLogin: state.auth.isLogin,\n  });\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n  return ConnectedAuthRedirectComponent;\n};\n"],"sourceRoot":""}
{"ast":null,"code":"import { profileAPI } from \"../components/api/api\";\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\nconst SET_USER_STATUS = \"SET-USER-STATUS\";\nlet initialState = {\n  postsData: [{\n    id: 1,\n    message: \"Hi, i am john\",\n    likesCount: 12\n  }, {\n    id: 2,\n    message: \"welcome\",\n    likesCount: 18\n  }],\n  profile: null,\n  status: \"\"\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST:\n      {\n        let newPost = {\n          id: state.postsData.length + 1,\n          message: action.newPostText,\n          likesCount: 0\n        };\n        return { ...state,\n          postsData: [...state.postsData, newPost],\n          newPostText: \"\"\n        };\n      }\n\n    case SET_USER_STATUS:\n      {\n        return { ...state,\n          status: action.status\n        };\n      }\n\n    case SET_USER_PROFILE:\n      {\n        return { ...state,\n          profile: action.profile\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = newPostText => ({\n  type: ADD_POST,\n  newPostText\n});\nexport const setUserStatus = status => ({\n  type: SET_USER_STATUS,\n  status\n});\nexport const setUserProfile = profile => ({\n  type: SET_USER_PROFILE,\n  profile\n});\nexport const getUserStatus = userId => async dispatch => {\n  let response = await profileAPI.getUserStatus(userId);\n  dispatch(setUserStatus(response.data));\n};\nexport const getUserProfile = userId => async dispatch => {\n  let data = await profileAPI.getUserProfile(userId);\n  dispatch(setUserProfile(data));\n};\nexport const updateUserStatus = status => async dispatch => {\n  let response = await profileAPI.updateUserStatus(status);\n\n  if (response.data.resultCode === 0) {\n    dispatch(setUserStatus(status));\n  }\n};\nexport default profileReducer;","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/redux/profileReducer.js"],"names":["profileAPI","ADD_POST","SET_USER_PROFILE","SET_USER_STATUS","initialState","postsData","id","message","likesCount","profile","status","profileReducer","state","action","type","newPost","length","newPostText","addPostActionCreator","setUserStatus","setUserProfile","getUserStatus","userId","dispatch","response","data","getUserProfile","updateUserStatus","resultCode"],"mappings":"AAAA,SAASA,UAAT,QAA2B,uBAA3B;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,gBAAgB,GAAG,kBAAzB;AACA,MAAMC,eAAe,GAAG,iBAAxB;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,CACT;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,OAAO,EAAE,eAAlB;AAAmCC,IAAAA,UAAU,EAAE;AAA/C,GADS,EAET;AAAEF,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,OAAO,EAAE,SAAlB;AAA6BC,IAAAA,UAAU,EAAE;AAAzC,GAFS,CADM;AAKjBC,EAAAA,OAAO,EAAE,IALQ;AAMjBC,EAAAA,MAAM,EAAE;AANS,CAAnB;;AASA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGR,YAAT,EAAuBS,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,QAAL;AAAe;AACb,YAAIc,OAAO,GAAG;AACZT,UAAAA,EAAE,EAAEM,KAAK,CAACP,SAAN,CAAgBW,MAAhB,GAAyB,CADjB;AAEZT,UAAAA,OAAO,EAAEM,MAAM,CAACI,WAFJ;AAGZT,UAAAA,UAAU,EAAE;AAHA,SAAd;AAKA,eAAO,EACL,GAAGI,KADE;AAELP,UAAAA,SAAS,EAAE,CAAC,GAAGO,KAAK,CAACP,SAAV,EAAqBU,OAArB,CAFN;AAGLE,UAAAA,WAAW,EAAE;AAHR,SAAP;AAKD;;AACD,SAAKd,eAAL;AAAsB;AACpB,eAAO,EACL,GAAGS,KADE;AAELF,UAAAA,MAAM,EAAEG,MAAM,CAACH;AAFV,SAAP;AAID;;AACD,SAAKR,gBAAL;AAAuB;AACrB,eAAO,EACL,GAAGU,KADE;AAELH,UAAAA,OAAO,EAAEI,MAAM,CAACJ;AAFX,SAAP;AAID;;AAED;AACE,aAAOG,KAAP;AA3BJ;AA6BD,CA9BD;;AAgCA,OAAO,MAAMM,oBAAoB,GAAID,WAAD,KAAkB;AACpDH,EAAAA,IAAI,EAAEb,QAD8C;AAEpDgB,EAAAA;AAFoD,CAAlB,CAA7B;AAKP,OAAO,MAAME,aAAa,GAAIT,MAAD,KAAa;AAAEI,EAAAA,IAAI,EAAEX,eAAR;AAAyBO,EAAAA;AAAzB,CAAb,CAAtB;AACP,OAAO,MAAMU,cAAc,GAAIX,OAAD,KAAc;AAC1CK,EAAAA,IAAI,EAAEZ,gBADoC;AAE1CO,EAAAA;AAF0C,CAAd,CAAvB;AAKP,OAAO,MAAMY,aAAa,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC3D,MAAIC,QAAQ,GAAG,MAAMxB,UAAU,CAACqB,aAAX,CAAyBC,MAAzB,CAArB;AACAC,EAAAA,QAAQ,CAACJ,aAAa,CAACK,QAAQ,CAACC,IAAV,CAAd,CAAR;AACD,CAHM;AAIP,OAAO,MAAMC,cAAc,GAAIJ,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC5D,MAAIE,IAAI,GAAG,MAAMzB,UAAU,CAAC0B,cAAX,CAA0BJ,MAA1B,CAAjB;AACAC,EAAAA,QAAQ,CAACH,cAAc,CAACK,IAAD,CAAf,CAAR;AACD,CAHM;AAKP,OAAO,MAAME,gBAAgB,GAAIjB,MAAD,IAAY,MAAOa,QAAP,IAAoB;AAC9D,MAAIC,QAAQ,GAAG,MAAMxB,UAAU,CAAC2B,gBAAX,CAA4BjB,MAA5B,CAArB;;AACA,MAAIc,QAAQ,CAACC,IAAT,CAAcG,UAAd,KAA6B,CAAjC,EAAoC;AAClCL,IAAAA,QAAQ,CAACJ,aAAa,CAACT,MAAD,CAAd,CAAR;AACD;AACF,CALM;AAOP,eAAeC,cAAf","sourcesContent":["import { profileAPI } from \"../components/api/api\";\n\nconst ADD_POST = \"ADD-POST\";\nconst SET_USER_PROFILE = \"SET-USER-PROFILE\";\nconst SET_USER_STATUS = \"SET-USER-STATUS\";\n\nlet initialState = {\n  postsData: [\n    { id: 1, message: \"Hi, i am john\", likesCount: 12 },\n    { id: 2, message: \"welcome\", likesCount: 18 },\n  ],\n  profile: null,\n  status: \"\",\n};\n\nconst profileReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST: {\n      let newPost = {\n        id: state.postsData.length + 1,\n        message: action.newPostText,\n        likesCount: 0,\n      };\n      return {\n        ...state,\n        postsData: [...state.postsData, newPost],\n        newPostText: \"\",\n      };\n    }\n    case SET_USER_STATUS: {\n      return {\n        ...state,\n        status: action.status,\n      };\n    }\n    case SET_USER_PROFILE: {\n      return {\n        ...state,\n        profile: action.profile,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const addPostActionCreator = (newPostText) => ({\n  type: ADD_POST,\n  newPostText,\n});\n\nexport const setUserStatus = (status) => ({ type: SET_USER_STATUS, status });\nexport const setUserProfile = (profile) => ({\n  type: SET_USER_PROFILE,\n  profile,\n});\n\nexport const getUserStatus = (userId) => async (dispatch) => {\n  let response = await profileAPI.getUserStatus(userId);\n  dispatch(setUserStatus(response.data));\n};\nexport const getUserProfile = (userId) => async (dispatch) => {\n  let data = await profileAPI.getUserProfile(userId);\n  dispatch(setUserProfile(data));\n};\n\nexport const updateUserStatus = (status) => async (dispatch) => {\n  let response = await profileAPI.updateUserStatus(status);\n  if (response.data.resultCode === 0) {\n    dispatch(setUserStatus(status));\n  }\n};\n\nexport default profileReducer;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Dialogs/DialogsContainer.jsx\";\nimport React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./MessageItem/MessageItem\";\nimport { updateNewMessageBodyCreator, sendMessageCreator } from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst DialogsContainer = props => {\n  let state = props.store.getState().dialogsPage;\n  let dialogsElements = state.dialogsData.map(dialog => /*#__PURE__*/_jsxDEV(DialogItem, {\n    name: dialog.name,\n    id: dialog.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this));\n  let messagesElements = state.messagesData.map(message => /*#__PURE__*/_jsxDEV(MessageItem, {\n    message: message.message,\n    id: message.id\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this));\n  let newMessageBody = state.newMessageBody;\n\n  let sendMessage = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n\n  let updateNewMessageBody = body => {\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialogs, {\n    sendMessage: sendMessage,\n    updateNewMessageBody: updateNewMessageBody\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n\n_c = DialogsContainer;\nexport default DialogsContainer;\n\nvar _c;\n\n$RefreshReg$(_c, \"DialogsContainer\");","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Dialogs/DialogsContainer.jsx"],"names":["React","classes","DialogItem","MessageItem","updateNewMessageBodyCreator","sendMessageCreator","Dialogs","DialogsContainer","props","state","store","getState","dialogsPage","dialogsElements","dialogsData","map","dialog","name","id","messagesElements","messagesData","message","newMessageBody","sendMessage","dispatch","updateNewMessageBody","body"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,SACEC,2BADF,EAEEC,kBAFF,QAGO,4BAHP;AAIA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,gBAAgB,GAAIC,KAAD,IAAW;AAClC,MAAIC,KAAK,GAAGD,KAAK,CAACE,KAAN,CAAYC,QAAZ,GAAuBC,WAAnC;AAEA,MAAIC,eAAe,GAAGJ,KAAK,CAACK,WAAN,CAAkBC,GAAlB,CAAuBC,MAAD,iBAC1C,QAAC,UAAD;AAAY,IAAA,IAAI,EAAEA,MAAM,CAACC,IAAzB;AAA+B,IAAA,EAAE,EAAED,MAAM,CAACE;AAA1C;AAAA;AAAA;AAAA;AAAA,UADoB,CAAtB;AAGA,MAAIC,gBAAgB,GAAGV,KAAK,CAACW,YAAN,CAAmBL,GAAnB,CAAwBM,OAAD,iBAC5C,QAAC,WAAD;AAAa,IAAA,OAAO,EAAEA,OAAO,CAACA,OAA9B;AAAuC,IAAA,EAAE,EAAEA,OAAO,CAACH;AAAnD;AAAA;AAAA;AAAA;AAAA,UADqB,CAAvB;AAIA,MAAII,cAAc,GAAGb,KAAK,CAACa,cAA3B;;AAEA,MAAIC,WAAW,GAAG,MAAM;AACtBf,IAAAA,KAAK,CAACE,KAAN,CAAYc,QAAZ,CAAqBnB,kBAAkB,EAAvC;AACD,GAFD;;AAIA,MAAIoB,oBAAoB,GAAIC,IAAD,IAAU;AACnClB,IAAAA,KAAK,CAACE,KAAN,CAAYc,QAAZ,CAAqBpB,2BAA2B,CAACsB,IAAD,CAAhD;AACD,GAFD;;AAIA,sBACE,QAAC,OAAD;AACE,IAAA,WAAW,EAAEH,WADf;AAEE,IAAA,oBAAoB,EAAEE;AAFxB;AAAA;AAAA;AAAA;AAAA,UADF;AAMD,CA1BD;;KAAMlB,gB;AA4BN,eAAeA,gBAAf","sourcesContent":["import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport MessageItem from \"./MessageItem/MessageItem\";\nimport {\n  updateNewMessageBodyCreator,\n  sendMessageCreator,\n} from \"../../redux/dialogsReducer\";\nimport Dialogs from \"./Dialogs\";\n\nconst DialogsContainer = (props) => {\n  let state = props.store.getState().dialogsPage;\n\n  let dialogsElements = state.dialogsData.map((dialog) => (\n    <DialogItem name={dialog.name} id={dialog.id} />\n  ));\n  let messagesElements = state.messagesData.map((message) => (\n    <MessageItem message={message.message} id={message.id} />\n  ));\n\n  let newMessageBody = state.newMessageBody;\n\n  let sendMessage = () => {\n    props.store.dispatch(sendMessageCreator());\n  };\n\n  let updateNewMessageBody = (body) => {\n    props.store.dispatch(updateNewMessageBodyCreator(body));\n  };\n\n  return (\n    <Dialogs\n      sendMessage={sendMessage}\n      updateNewMessageBody={updateNewMessageBody}\n    />\n  );\n};\n\nexport default DialogsContainer;\n"]},"metadata":{},"sourceType":"module"}
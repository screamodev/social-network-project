{"ast":null,"code":"import { authAPI } from \"../components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_INITIALIZED = \"SET-INITIALIZED\"; //const TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\n\nlet initialState = {\n  initialized: false,\n  email: null,\n  login: null,\n  isLogin: false,\n  isFetching: true\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_INITIALIZED:\n      return { ...state,\n        initialized: true\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isLogin) => ({\n  type: SET_USERS_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isLogin\n  }\n}); //thunka\n\nexport const getAuthUserData = () => dispatch => {\n  authAPI.me().then(response => {\n    if (response.data.resultCode === 0) {\n      let {\n        id,\n        email,\n        login\n      } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  authAPI.login(email, password, rememberMe).then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData());\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n      dispatch(stopSubmit(\"login\", {\n        _error: message\n      }));\n    }\n  });\n};\nexport const logout = () => dispatch => {\n  authAPI.logout().then(response => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null, null, null, false));\n    }\n  });\n}; //export const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\n\nexport default authReducer;","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/redux/appReducer.js"],"names":["authAPI","stopSubmit","SET_INITIALIZED","initialState","initialized","email","login","isLogin","isFetching","appReducer","state","action","type","setAuthUserData","userId","SET_USERS_DATA","payload","getAuthUserData","dispatch","me","then","response","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout","authReducer"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,MAAMC,eAAe,GAAG,iBAAxB,C,CAEA;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE,KADI;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAAnB;;AAQA,MAAMC,UAAU,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACnD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,eAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELN,QAAAA,WAAW,EAAC;AAFP,OAAP;;AAIF;AACE,aAAOM,KAAP;AAPJ;AASD,CAVD;;AAYA,OAAO,MAAMG,eAAe,GAAG,CAACC,MAAD,EAAST,KAAT,EAAgBC,KAAhB,EAAuBC,OAAvB,MAAoC;AACjEK,EAAAA,IAAI,EAAEG,cAD2D;AAEjEC,EAAAA,OAAO,EAAC;AAAEF,IAAAA,MAAF;AAAUT,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAFyD,CAApC,CAAxB,C,CAUP;;AAEA,OAAO,MAAMU,eAAe,GAAG,MAAOC,QAAD,IAAc;AACjDlB,EAAAA,OAAO,CAACmB,EAAR,GAAaC,IAAb,CAAmBC,QAAD,IAAc;AAC9B,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,UAAI;AAAEC,QAAAA,EAAF;AAAMnB,QAAAA,KAAN;AAAaC,QAAAA;AAAb,UAAuBe,QAAQ,CAACC,IAAT,CAAcA,IAAzC;AACAJ,MAAAA,QAAQ,CAACL,eAAe,CAACW,EAAD,EAAKnB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACD;AACF,GALD;AAMD,CAPM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQoB,QAAR,EAAkBC,UAAlB,KAAkCR,QAAD,IAAc;AAClElB,EAAAA,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAoBoB,QAApB,EAA6BC,UAA7B,EAAyCN,IAAzC,CAA+CC,QAAD,IAAc;AAC1D,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCL,MAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACD,KAFD,MAEO;AACL,UAAIU,OAAO,GAAGN,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GAAoCR,QAAQ,CAACC,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CAApC,GAA+D,YAA7E;AACAV,MAAAA,QAAQ,CAACjB,UAAU,CAAC,OAAD,EAAU;AAAC6B,QAAAA,MAAM,EAAEH;AAAT,OAAV,CAAX,CAAR;AACD;AACF,GAPD;AAQD,CATM;AAWP,OAAO,MAAMI,MAAM,GAAG,MAAOb,QAAD,IAAc;AACxClB,EAAAA,OAAO,CAAC+B,MAAR,GAAiBX,IAAjB,CAAuBC,QAAD,IAAc;AAClC,QAAIA,QAAQ,CAACC,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCL,MAAAA,QAAQ,CAACL,eAAe,CAAC,IAAD,EAAM,IAAN,EAAW,IAAX,EAAgB,KAAhB,CAAhB,CAAR;AACD;AACF,GAJD;AAKD,CANM,C,CAQP;;AAEA,eAAemB,WAAf","sourcesContent":["import { authAPI } from \"../components/api/api\";\nimport {stopSubmit} from \"redux-form\"\n\nconst SET_INITIALIZED = \"SET-INITIALIZED\";\n\n//const TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\n\nlet initialState = {\n  initialized: false,\n  email: null,\n  login: null,\n  isLogin: false,\n  isFetching: true,\n};\n\nconst appReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_INITIALIZED:\n      return {\n        ...state,\n        initialized:true,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isLogin) => ({\n  type: SET_USERS_DATA,\n  payload:{ userId, email, login, isLogin },\n});\n\n\n\n\n\n\n//thunka\n\nexport const getAuthUserData = () => (dispatch) => {\n  authAPI.me().then((response) => {\n    if (response.data.resultCode === 0) {\n      let { id, email, login } = response.data.data;\n      dispatch(setAuthUserData(id, email, login, true));\n    }\n  });\n};\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n  authAPI.login(email,password,rememberMe).then((response) => {\n    if (response.data.resultCode === 0) {\n      dispatch(getAuthUserData())\n    } else {\n      let message = response.data.messages.length > 0 ? response.data.messages[0]: \"Some error\"\n      dispatch(stopSubmit(\"login\", {_error: message}))\n    }\n  });\n};\n\nexport const logout = () => (dispatch) => {\n  authAPI.logout().then((response) => {\n    if (response.data.resultCode === 0) {\n      dispatch(setAuthUserData(null,null,null,false))\n    }\n  });\n};\n\n//export const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}
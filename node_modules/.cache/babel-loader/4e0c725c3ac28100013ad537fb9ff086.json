{"ast":null,"code":"var _jsxFileName = \"/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Users/UsersContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { follow, setCurrentPage, setUsers, setTotalUsersCount, toggleIsFetching, unfollow } from \"../../redux/usersReducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users.jsx\";\nimport PreLoader from \"../common/preLoader/preLoader\";\nimport { getUsers } from \"../api/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass UsersContainer extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onPageChanged = pageNumber => {\n      this.props.toggleIsFetching(true);\n      this.props.setCurrentPage(pageNumber);\n      axios.get(`https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`, {\n        withCredentials: true\n      }).then(response => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers(this.props.currentPage, this.props.pageSize).then(response => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [this.props.isFetching ? /*#__PURE__*/_jsxDEV(PreLoader, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 34\n      }, this) : null, /*#__PURE__*/_jsxDEV(Users, {\n        totalUsersCount: this.props.totalUsersCount,\n        pageSize: this.props.pageSize,\n        selectedPage: this.props.selectedPage,\n        unfollow: this.props.unfollow,\n        follow: this.props.follow,\n        usersData: this.props.usersData,\n        onPageChanged: this.onPageChanged,\n        usersData: this.props.usersData,\n        isFetching: this.props.isFetching\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nlet mapStateToProps = state => {\n  return {\n    usersData: state.usersPage.usersData,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching\n  };\n}; // let mapDispatchToProps = (dispatch) => {\n//   return {\n//     follow: (userId) => {\n//       dispatch(followAC(userId));\n//     },\n//     unfollow: (userId) => {\n//       dispatch(unfollowAC(userId));\n//     },\n//     setUsers: (usersData) => {\n//       dispatch(setUsersAC(usersData));\n//     },\n//     setCurrentPage: (pageNumber) => {\n//       dispatch(setCurrentPageAC(pageNumber));\n//     },\n//     setTotalUsersCount: (totalCount) => {\n//       dispatch(setUsersTotalCountAC(totalCount));\n//     },\n//     toggleIsFetching: (isFetching) => {\n//       dispatch(toggleIsFetchingAC(isFetching));\n//     },\n//   };\n// };\n\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching\n})(UsersContainer);","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Users/UsersContainer.jsx"],"names":["React","connect","follow","setCurrentPage","setUsers","setTotalUsersCount","toggleIsFetching","unfollow","axios","Users","PreLoader","getUsers","UsersContainer","Component","onPageChanged","pageNumber","props","get","currentPage","pageSize","withCredentials","then","response","data","items","componentDidMount","totalCount","render","isFetching","totalUsersCount","selectedPage","usersData","mapStateToProps","state","usersPage"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,MADF,EAEEC,cAFF,EAGEC,QAHF,EAIEC,kBAJF,EAKEC,gBALF,EAMEC,QANF,QAOO,0BAPP;AAQA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;AACA,SAASC,QAAT,QAAyB,YAAzB;;;;AAEA,MAAMC,cAAN,SAA6BZ,KAAK,CAACa,SAAnC,CAA6C;AAAA;AAAA;;AAAA,SAU3CC,aAV2C,GAU1BC,UAAD,IAAgB;AAC9B,WAAKC,KAAL,CAAWV,gBAAX,CAA4B,IAA5B;AACA,WAAKU,KAAL,CAAWb,cAAX,CAA0BY,UAA1B;AACAP,MAAAA,KAAK,CACFS,GADH,CAEK,2DAA0D,KAAKD,KAAL,CAAWE,WAAY,UAAS,KAAKF,KAAL,CAAWG,QAAS,EAFnH,EAGI;AACEC,QAAAA,eAAe,EAAE;AADnB,OAHJ,EAOGC,IAPH,CAOSC,QAAD,IAAc;AAClB,aAAKN,KAAL,CAAWV,gBAAX,CAA4B,KAA5B;AACA,aAAKU,KAAL,CAAWZ,QAAX,CAAoBkB,QAAQ,CAACC,IAAT,CAAcC,KAAlC;AACD,OAVH;AAWD,KAxB0C;AAAA;;AAC3CC,EAAAA,iBAAiB,GAAG;AAClB,SAAKT,KAAL,CAAWV,gBAAX,CAA4B,IAA5B;AACAK,IAAAA,QAAQ,CAAC,KAAKK,KAAL,CAAWE,WAAZ,EAAyB,KAAKF,KAAL,CAAWG,QAApC,CAAR,CAAsDE,IAAtD,CAA4DC,QAAD,IAAc;AACvE,WAAKN,KAAL,CAAWV,gBAAX,CAA4B,KAA5B;AACA,WAAKU,KAAL,CAAWZ,QAAX,CAAoBkB,QAAQ,CAACC,IAAT,CAAcC,KAAlC;AACA,WAAKR,KAAL,CAAWX,kBAAX,CAA8BiB,QAAQ,CAACC,IAAT,CAAcG,UAA5C;AACD,KAJD;AAKD;;AAkBDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA,iBACG,KAAKX,KAAL,CAAWY,UAAX,gBAAwB,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,cAAxB,GAAwC,IAD3C,eAEE,QAAC,KAAD;AACE,QAAA,eAAe,EAAE,KAAKZ,KAAL,CAAWa,eAD9B;AAEE,QAAA,QAAQ,EAAE,KAAKb,KAAL,CAAWG,QAFvB;AAGE,QAAA,YAAY,EAAE,KAAKH,KAAL,CAAWc,YAH3B;AAIE,QAAA,QAAQ,EAAE,KAAKd,KAAL,CAAWT,QAJvB;AAKE,QAAA,MAAM,EAAE,KAAKS,KAAL,CAAWd,MALrB;AAME,QAAA,SAAS,EAAE,KAAKc,KAAL,CAAWe,SANxB;AAOE,QAAA,aAAa,EAAE,KAAKjB,aAPtB;AAQE,QAAA,SAAS,EAAE,KAAKE,KAAL,CAAWe,SARxB;AASE,QAAA,UAAU,EAAE,KAAKf,KAAL,CAAWY;AATzB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,oBADF;AAgBD;;AA3C0C;;AA8C7C,IAAII,eAAe,GAAIC,KAAD,IAAW;AAC/B,SAAO;AACLF,IAAAA,SAAS,EAAEE,KAAK,CAACC,SAAN,CAAgBH,SADtB;AAELZ,IAAAA,QAAQ,EAAEc,KAAK,CAACC,SAAN,CAAgBf,QAFrB;AAGLU,IAAAA,eAAe,EAAEI,KAAK,CAACC,SAAN,CAAgBL,eAH5B;AAILX,IAAAA,WAAW,EAAEe,KAAK,CAACC,SAAN,CAAgBhB,WAJxB;AAKLU,IAAAA,UAAU,EAAEK,KAAK,CAACC,SAAN,CAAgBN;AALvB,GAAP;AAOD,CARD,C,CAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAe3B,OAAO,CAAC+B,eAAD,EAAkB;AACtC9B,EAAAA,MADsC;AAEtCK,EAAAA,QAFsC;AAGtCH,EAAAA,QAHsC;AAItCD,EAAAA,cAJsC;AAKtCE,EAAAA,kBALsC;AAMtCC,EAAAA;AANsC,CAAlB,CAAP,CAOZM,cAPY,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  follow,\n  setCurrentPage,\n  setUsers,\n  setTotalUsersCount,\n  toggleIsFetching,\n  unfollow,\n} from \"../../redux/usersReducer\";\nimport * as axios from \"axios\";\nimport Users from \"./Users.jsx\";\nimport PreLoader from \"../common/preLoader/preLoader\";\nimport { getUsers } from \"../api/api\";\n\nclass UsersContainer extends React.Component {\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    getUsers(this.props.currentPage, this.props.pageSize).then((response) => {\n      this.props.toggleIsFetching(false);\n      this.props.setUsers(response.data.items);\n      this.props.setTotalUsersCount(response.data.totalCount);\n    });\n  }\n\n  onPageChanged = (pageNumber) => {\n    this.props.toggleIsFetching(true);\n    this.props.setCurrentPage(pageNumber);\n    axios\n      .get(\n        `https://social-network.samuraijs.com/api/1.0/users?page=${this.props.currentPage}&count=${this.props.pageSize}`,\n        {\n          withCredentials: true,\n        }\n      )\n      .then((response) => {\n        this.props.toggleIsFetching(false);\n        this.props.setUsers(response.data.items);\n      });\n  };\n\n  render() {\n    return (\n      <>\n        {this.props.isFetching ? <PreLoader /> : null}\n        <Users\n          totalUsersCount={this.props.totalUsersCount}\n          pageSize={this.props.pageSize}\n          selectedPage={this.props.selectedPage}\n          unfollow={this.props.unfollow}\n          follow={this.props.follow}\n          usersData={this.props.usersData}\n          onPageChanged={this.onPageChanged}\n          usersData={this.props.usersData}\n          isFetching={this.props.isFetching}\n        />\n      </>\n    );\n  }\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    usersData: state.usersPage.usersData,\n    pageSize: state.usersPage.pageSize,\n    totalUsersCount: state.usersPage.totalUsersCount,\n    currentPage: state.usersPage.currentPage,\n    isFetching: state.usersPage.isFetching,\n  };\n};\n\n// let mapDispatchToProps = (dispatch) => {\n//   return {\n//     follow: (userId) => {\n//       dispatch(followAC(userId));\n//     },\n//     unfollow: (userId) => {\n//       dispatch(unfollowAC(userId));\n//     },\n//     setUsers: (usersData) => {\n//       dispatch(setUsersAC(usersData));\n//     },\n//     setCurrentPage: (pageNumber) => {\n//       dispatch(setCurrentPageAC(pageNumber));\n//     },\n//     setTotalUsersCount: (totalCount) => {\n//       dispatch(setUsersTotalCountAC(totalCount));\n//     },\n//     toggleIsFetching: (isFetching) => {\n//       dispatch(toggleIsFetchingAC(isFetching));\n//     },\n//   };\n// };\n\nexport default connect(mapStateToProps, {\n  follow,\n  unfollow,\n  setUsers,\n  setCurrentPage,\n  setTotalUsersCount,\n  toggleIsFetching,\n})(UsersContainer);\n"]},"metadata":{},"sourceType":"module"}
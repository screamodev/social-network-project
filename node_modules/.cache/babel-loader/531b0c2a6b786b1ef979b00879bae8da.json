{"ast":null,"code":"var _jsxFileName = \"/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Profile/ProfileContainer.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, withRouter } from \"react-router\";\nimport { getUserProfile } from \"../../redux/profileReducer\";\nimport Profile from \"./Profile\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProfileContainer extends React.Component {\n  componentDidMount() {\n    let userId = this.props.match.params.userId;\n\n    if (!userId) {\n      userId = 2;\n    }\n\n    this.props.getUserProfile(userId);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(Profile, { ...this.props,\n      profile: this.props.profile\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nlet AuthRedirectComponent = props => {\n  if (!this.props.isLogin) return /*#__PURE__*/_jsxDEV(Redirect, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(ProfileContainer, { ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n};\n\n_c = AuthRedirectComponent;\n\nlet mapStateToProps = state => ({\n  profile: state.profilePage.profile,\n  isLogin: state.auth.isLogin\n});\n\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n_c2 = WithUrlDataContainerComponent;\nexport default connect(mapStateToProps, {\n  getUserProfile\n})(WithUrlDataContainerComponent);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AuthRedirectComponent\");\n$RefreshReg$(_c2, \"WithUrlDataContainerComponent\");","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/components/Profile/ProfileContainer.jsx"],"names":["React","connect","Redirect","withRouter","getUserProfile","Profile","ProfileContainer","Component","componentDidMount","userId","props","match","params","render","profile","AuthRedirectComponent","isLogin","mapStateToProps","state","profilePage","auth","WithUrlDataContainerComponent"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,cAArC;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAOC,OAAP,MAAoB,WAApB;;;AAEA,MAAMC,gBAAN,SAA+BN,KAAK,CAACO,SAArC,CAA+C;AAC7CC,EAAAA,iBAAiB,GAAG;AAClB,QAAIC,MAAM,GAAG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,MAAjB,CAAwBH,MAArC;;AACA,QAAI,CAACA,MAAL,EAAa;AACXA,MAAAA,MAAM,GAAG,CAAT;AACD;;AACD,SAAKC,KAAL,CAAWN,cAAX,CAA0BK,MAA1B;AACD;;AAEDI,EAAAA,MAAM,GAAG;AAEP,wBAAO,QAAC,OAAD,OAAa,KAAKH,KAAlB;AAAyB,MAAA,OAAO,EAAE,KAAKA,KAAL,CAAWI;AAA7C;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AAZ4C;;AAkB/C,IAAIC,qBAAqB,GAAKL,KAAF,IAAY;AACtC,MAAI,CAAC,KAAKA,KAAL,CAAWM,OAAhB,EAAyB,oBAAO,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAP;AACzB,sBAAO,QAAC,gBAAD,OAAsBN;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHD;;KAAIK,qB;;AASJ,IAAIE,eAAe,GAAIC,KAAD,KAAY;AAChCJ,EAAAA,OAAO,EAAEI,KAAK,CAACC,WAAN,CAAkBL,OADK;AAEhCE,EAAAA,OAAO,EAAEE,KAAK,CAACE,IAAN,CAAWJ;AAFY,CAAZ,CAAtB;;AAKA,IAAIK,6BAA6B,GAAGlB,UAAU,CAACY,qBAAD,CAA9C;MAAIM,6B;AAEJ,eAAepB,OAAO,CAACgB,eAAD,EAAkB;AAAEb,EAAAA;AAAF,CAAlB,CAAP,CACbiB,6BADa,CAAf","sourcesContent":["import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect, withRouter } from \"react-router\";\nimport { getUserProfile } from \"../../redux/profileReducer\";\nimport Profile from \"./Profile\";\n\nclass ProfileContainer extends React.Component {\n  componentDidMount() {\n    let userId = this.props.match.params.userId;\n    if (!userId) {\n      userId = 2;\n    }\n    this.props.getUserProfile(userId);\n  }\n\n  render() {\n    \n    return <Profile {...this.props} profile={this.props.profile} />;\n  }\n}\n\n\n\n\nlet AuthRedirectComponent = ( props) => {\n  if (!this.props.isLogin) return <Redirect to=\"/login\" />;\n  return <ProfileContainer {...props}/>\n}\n\n\n\n\n\nlet mapStateToProps = (state) => ({\n  profile: state.profilePage.profile,\n  isLogin: state.auth.isLogin,\n});\n\nlet WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n\nexport default connect(mapStateToProps, { getUserProfile })(\n  WithUrlDataContainerComponent\n);\n"]},"metadata":{},"sourceType":"module"}
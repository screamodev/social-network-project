{"ast":null,"code":"import { authAPI } from \"../components/api/api\";\nimport { stopSubmit } from \"redux-form\";\nconst SET_USERS_DATA = \"SET-USERS-DATA\"; //const TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\n\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isLogin: false,\n  isFetching: true\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERS_DATA:\n      return { ...state,\n        ...action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isLogin) => ({\n  type: SET_USERS_DATA,\n  payload: {\n    userId,\n    email,\n    login,\n    isLogin\n  }\n}); //thunka\n\nexport const getAuthUserData = () => async dispatch => {\n  //refactoring\n  let response = await authAPI.me();\n\n  if (response.data.resultCode === 0) {\n    let {\n      id,\n      email,\n      login\n    } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\nexport const login = (email, password, rememberMe) => dispatch => {\n  let response = authAPI.login(email, password, rememberMe);\n\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\n    dispatch(stopSubmit(\"login\", {\n      _error: message\n    }));\n  }\n};\nexport const logout = () => dispatch => {\n  let response = authAPI.logout();\n\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n}; //export const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\n\nexport default authReducer;","map":{"version":3,"sources":["/home/screamoviolence/myDream/js/react-practise/my-first-app/src/redux/authReducer.js"],"names":["authAPI","stopSubmit","SET_USERS_DATA","initialState","userId","email","login","isLogin","isFetching","authReducer","state","action","type","payload","setAuthUserData","getAuthUserData","dispatch","response","me","data","resultCode","id","password","rememberMe","message","messages","length","_error","logout"],"mappings":"AAAA,SAASA,OAAT,QAAwB,uBAAxB;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,MAAMC,cAAc,GAAG,gBAAvB,C,CAEA;;AAEA,IAAIC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,IADS;AAEjBC,EAAAA,KAAK,EAAE,IAFU;AAGjBC,EAAAA,KAAK,EAAE,IAHU;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,UAAU,EAAE;AALK,CAAnB;;AAQA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGP,YAAT,EAAuBQ,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKV,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAEL,WAAGC,MAAM,CAACE;AAFL,OAAP;;AAIF;AACE,aAAOH,KAAP;AAPJ;AASD,CAVD;;AAYA,OAAO,MAAMI,eAAe,GAAG,CAACV,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBC,OAAvB,MAAoC;AACjEK,EAAAA,IAAI,EAAEV,cAD2D;AAEjEW,EAAAA,OAAO,EAAE;AAAET,IAAAA,MAAF;AAAUC,IAAAA,KAAV;AAAiBC,IAAAA,KAAjB;AAAwBC,IAAAA;AAAxB;AAFwD,CAApC,CAAxB,C,CAKP;;AAEA,OAAO,MAAMQ,eAAe,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACvD;AACA,MAAIC,QAAQ,GAAG,MAAMjB,OAAO,CAACkB,EAAR,EAArB;;AACA,MAAID,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClC,QAAI;AAAEC,MAAAA,EAAF;AAAMhB,MAAAA,KAAN;AAAaC,MAAAA;AAAb,QAAuBW,QAAQ,CAACE,IAAT,CAAcA,IAAzC;AACAH,IAAAA,QAAQ,CAACF,eAAe,CAACO,EAAD,EAAKhB,KAAL,EAAYC,KAAZ,EAAmB,IAAnB,CAAhB,CAAR;AACD;AACF,CAPM;AASP,OAAO,MAAMA,KAAK,GAAG,CAACD,KAAD,EAAQiB,QAAR,EAAkBC,UAAlB,KAAkCP,QAAD,IAAc;AAClE,MAAIC,QAAQ,GAAGjB,OAAO,CAACM,KAAR,CAAcD,KAAd,EAAqBiB,QAArB,EAA+BC,UAA/B,CAAf;;AACA,MAAIN,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCJ,IAAAA,QAAQ,CAACD,eAAe,EAAhB,CAAR;AACD,GAFD,MAEO;AACL,QAAIS,OAAO,GACTP,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuBC,MAAvB,GAAgC,CAAhC,GACIT,QAAQ,CAACE,IAAT,CAAcM,QAAd,CAAuB,CAAvB,CADJ,GAEI,YAHN;AAIAT,IAAAA,QAAQ,CAACf,UAAU,CAAC,OAAD,EAAU;AAAE0B,MAAAA,MAAM,EAAEH;AAAV,KAAV,CAAX,CAAR;AACD;AACF,CAXM;AAaP,OAAO,MAAMI,MAAM,GAAG,MAAOZ,QAAD,IAAc;AACxC,MAAIC,QAAQ,GAAGjB,OAAO,CAAC4B,MAAR,EAAf;;AACA,MAAIX,QAAQ,CAACE,IAAT,CAAcC,UAAd,KAA6B,CAAjC,EAAoC;AAClCJ,IAAAA,QAAQ,CAACF,eAAe,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,KAAnB,CAAhB,CAAR;AACD;AACF,CALM,C,CAOP;;AAEA,eAAeL,WAAf","sourcesContent":["import { authAPI } from \"../components/api/api\";\nimport { stopSubmit } from \"redux-form\";\n\nconst SET_USERS_DATA = \"SET-USERS-DATA\";\n\n//const TOGGLE_IS_FETCHING = \"TOGGLE-IS-FETCHING\";\n\nlet initialState = {\n  userId: null,\n  email: null,\n  login: null,\n  isLogin: false,\n  isFetching: true,\n};\n\nconst authReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case SET_USERS_DATA:\n      return {\n        ...state,\n        ...action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setAuthUserData = (userId, email, login, isLogin) => ({\n  type: SET_USERS_DATA,\n  payload: { userId, email, login, isLogin },\n});\n\n//thunka\n\nexport const getAuthUserData = () => async (dispatch) => {\n  //refactoring\n  let response = await authAPI.me();\n  if (response.data.resultCode === 0) {\n    let { id, email, login } = response.data.data;\n    dispatch(setAuthUserData(id, email, login, true));\n  }\n};\n\nexport const login = (email, password, rememberMe) => (dispatch) => {\n  let response = authAPI.login(email, password, rememberMe);\n  if (response.data.resultCode === 0) {\n    dispatch(getAuthUserData());\n  } else {\n    let message =\n      response.data.messages.length > 0\n        ? response.data.messages[0]\n        : \"Some error\";\n    dispatch(stopSubmit(\"login\", { _error: message }));\n  }\n};\n\nexport const logout = () => (dispatch) => {\n  let response = authAPI.logout();\n  if (response.data.resultCode === 0) {\n    dispatch(setAuthUserData(null, null, null, false));\n  }\n};\n\n//export const toggleIsFetching = (isFetching) => ({ type: TOGGLE_IS_FETCHING, isFetching });\n\nexport default authReducer;\n"]},"metadata":{},"sourceType":"module"}